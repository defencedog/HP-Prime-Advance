// program declarations good practise
ppl_mat();
ukmat();

// global variables are now local to this script
dt1, dt2;

// local subroutine invisible to user / apps outside script
ppl_mat(dt1, dt2)  
PRINT;                        
// flushing HP's M1 & M2 matrix & inserting all data at once
M1:={}; M1:=dt1;
M2:={}; M2:=dt2;
END;
 

#PYTHON EXPORT ukmat() 
#start

# for eval()
from hpprime import *
# for sin() cos() pi
from math import *
# for linspace range() doesnt allow noninteger step
from linalg import linspace

# Will return string {{..},{..},...,{..}}
def _2str(a,b):
   c=list(zip(a,b)) # unpacking syntax isn't supported =[*zip(a,b)]
   return str(c).replace('[','{').replace(']','}').replace('(','{').replace(')','}')
   
# some list comprehensions
uk_x=linspace(-3*pi,3*pi,100)
uk_y1=[cos(i) for i in uk_x]
uk_y2=[sin(i) for i in uk_x]
# Use custom function _2str to generate HP Matrix syntax
dt1=_2str(uk_x, uk_y1)
dt2=_2str(uk_x, uk_y2)

# PPL function eval() not needed
# ttt=eval('ppl_mat('+uk_y1+','+uk_y2+')')  
print('DONE')

#end
