~~~ Some General Notes on CAS + PYTHON ~~~ 
@ https://www.hpmuseum.org/forum/thread-9481-post-83159.html#pid83159
@ https://www.hpmuseum.org/forum/thread-11354-post-103551.html#pid103551
It's not Python, it's Python syntax compatibility inside CAS. I wrote a pre-parser that translates 
Python-like indentation to CAS blocs: def/for/while/if/else -> function/for/while/if/else
There are differences with true Python: only basic Python syntax is supported 
(no class or generators for example), string delimiters must be " (' keeps the same meaning 
that in normal CAS programs), there is no module import, but you have access to all CAS commands. 
It is recommended to declare local variables, the current implementation of the pre-parser 
will leave undeclared variables as global. List indexes follow HP convention on the Prime (start at 1). 
The programming editor of the Prime does not support this syntax, 
therefore it's not easy to program on the calc with Python syntax.
The interpreter behind is the CAS interpreter, therefore it should run at the same speed, 
and this is in general slower than the Home interpreter, there is a price to pay for more types 
(exact types, symbolic expressions, but also functions that can be passed as arguments to functions). 
There are a few optimizations in the CAS interpreter in this beta version, they will work if the variables 
used in the loops are local variables (and loops are a little faster if they contain only 1 instruction), 
another reason to declare local variables with the local keyword (something that you can not do in Python).

~~~ Transferring Python variables to / from PPL by Guenter Schink ~~~
@ https://www.hpmuseum.org/forum/thread-17833.html
@ https://www.hpmuseum.org/forum/thread-18380-post-160378.html#pid160378


~~~ Using Python codes / functions in CAS ~~~
@ https://www.hpmuseum.org/forum/thread-16995-post-148454.html#pid148454


#PYTHON test
#pytest

import sys
 
def sqrx(x):
  """
  Square a number.
  """
  return int(x)**2

# get the number on the stack and square it
y = sqrx(sys.argv[0])
# print the result to the Terminal
print(y)

#end 

EXPORT pytest(a)
BEGIN
  // clear the Terminal
  PRINT;
  // run the Python script
  PYTHON(test,a);
  // evaluate the string in the Terminal and return to the stack
  // important step to be used as CAS formula
  RETURN EXPR(TERMINAL(1));
END;


~~~ Will write .txt file in python APP Library folder ~~~

#PYTHON linew
#pylinew

# list of names
names = ['Jessa', 'Eric', 'Bob']

# open file in write mode
with open(r'demo.txt', 'w') as fp:
    for item in names:
        # write each item on a new line
        # doesn't support fstring syntax
        fp.write("%s\n" % item)
    print('Done')
    
EXPORT pylinew()
BEGIN
  PRINT;
  PYTHON(linew);
END;
